(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{417:function(t,e,a){"use strict";a.r(e);var s=a(11),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"metamask-extension-provider"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#metamask-extension-provider"}},[t._v("#")]),t._v(" MetaMask Extension Provider")]),t._v(" "),a("p",[t._v("A module for accessing the user's MetaMask "),a("a",{attrs:{href:"https://github.com/ethereum/wiki/wiki/JavaScript-API#web3currentprovider",target:"_blank",rel:"noopener noreferrer"}},[t._v("provider"),a("OutboundLink")],1),t._v(" from other WebExtensions.")]),t._v(" "),a("p",[t._v("The account provided by this provider will be the user's MetaMask account.")]),t._v(" "),a("p",[t._v("When sending signing requests to this provider, MetaMask will prompt the user to sign with their accounts.")]),t._v(" "),a("p",[t._v("Works in:")]),t._v(" "),a("ul",[a("li",[t._v("Chrome")]),t._v(" "),a("li",[t._v("Firefox")])]),t._v(" "),a("h2",{attrs:{id:"installation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[t._v("#")]),t._v(" Installation")]),t._v(" "),a("p",[t._v("Using npm as a package manager:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" metamask-extension-provider -s\n")])])]),a("h2",{attrs:{id:"usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("p",[t._v("Using a bundler like browserify:")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" createMetaMaskProvider "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'metamask-extension-provider'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" provider "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createMetaMaskProvider")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nprovider"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'error'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Failed to connect to MetaMask, fallback logic.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enjoy!")]),t._v("\n")])])]),a("h2",{attrs:{id:"adding-additional-browser-support"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#adding-additional-browser-support"}},[t._v("#")]),t._v(" Adding additional browser support")]),t._v(" "),a("p",[t._v("Add MetaMask's extension ID for that browser's store to the config file.")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"CHROME_ID"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nkbihfbeogaeaoehlefnkodbefgpgknn"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"FIREFOX_ID"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"webextension@metamask.io"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"running-the-example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#running-the-example"}},[t._v("#")]),t._v(" Running the example")]),t._v(" "),a("p",[t._v("Use the "),a("code",[t._v("./sample-extension")]),t._v(" folder as an WebExtension. You can easily add it to Chrome or Firefox Developer Edition.")]),t._v(" "),a("h2",{attrs:{id:"editing-the-example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#editing-the-example"}},[t._v("#")]),t._v(" Editing the example")]),t._v(" "),a("p",[t._v("You must have "),a("code",[t._v("browserify")]),t._v(" installed ("),a("code",[t._v("npm i -g browserify")]),t._v(").")]),t._v(" "),a("p",[t._v("You can edit the sample file "),a("code",[t._v("sample-extension/index.js")]),t._v(" and then rebuild the file with "),a("code",[t._v("npm run buildSample")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"using-with-a-local-development-copy-of-metamask"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-with-a-local-development-copy-of-metamask"}},[t._v("#")]),t._v(" Using with a local Development copy of MetaMask")]),t._v(" "),a("p",[t._v("You'll need to edit the method "),a("code",[t._v("getMetaMaskId()")]),t._v(" to return your local development MetaMask's id. You can get that from your MetaMask console with "),a("code",[t._v("chrome.runtime.id")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"current-limitations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#current-limitations"}},[t._v("#")]),t._v(" Current Limitations")]),t._v(" "),a("p",[t._v("In order to identify when there is a problem (like MetaMask was not connected), some kind of proper error handling must be added to "),a("a",{attrs:{href:"https://github.com/MetaMask/metamask-inpage-provider",target:"_blank",rel:"noopener noreferrer"}},[t._v("metamask-inpage-provider"),a("OutboundLink")],1),t._v(" that exposes the errors to the consumer of the provider. Maybe making it an event-emitter, so it can emit its errors, instead of just logging them.")])])}),[],!1,null,null,null);e.default=n.exports}}]);